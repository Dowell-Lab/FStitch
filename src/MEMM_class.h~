/*
 * MEMM_class.h
 *
 *  Created on: Jan 22, 2014
 *      Author: joeyazo
 */
#include <vector>
#include <stdlib.h>
#include <string>
#include <cstring>
#ifndef MEMM_CLASS_H_
#define MEMM_CLASS_H_
using namespace std;
class MEMM{

public:
	int begin;
	int end;
	int length;
	int SegCall;
	char strand[10];
	bool GENE;
	char annotation[150];
	char chrom[10];
	double avg_cov;
	double max_cov;
	double variance_cov;
	MEMM(){};
	MEMM(string input_strand , string begin_chrom, int val1, int val2,  string gene_ID, int length_val, double coverages_int , double max_cov_dbl, double variance_coverage){
		begin 		= val1;
		end 		= val2;
		length 		= length_val;
		max_cov 	= max_cov_dbl;
		avg_cov		= coverages_int;
		SegCall		= 0;
		variance_cov= variance_coverage;
		strcpy(strand, input_strand.c_str());
		strcpy(chrom, begin_chrom.c_str());
		strcpy(annotation,gene_ID.c_str());
		if (gene_ID.empty()){
			GENE = 0;
		}
		else{
			GENE = 1;
		}
	}
	void show(){
		//cout<<annotation<<endl;
		cout<<chrom<<"\t"<<begin<<"\t"<<end<<"\t"<<"\t"<<length<<"\t"<<annotation<<"\t"<<avg_cov<<"\t"<<endl;
	}



	void set_values(int, int, int,double,bool, string, string, string);
	void turnOn();
	vector<double> get_features(int);
};

void MEMM::set_values(int val1, int val2, int val3, double val4, bool val5, string val6, string val7, string val8){
	begin = val1;
	end   = val2;
	length = val3;
	avg_cov = val4;
	GENE = val5;
	strcpy(annotation, val6.c_str());
	strand = val7;
	chrom = val8;
}
vector<double> MEMM::get_features(int dim){
	vector <double> xs;
	if (dim == 1){
		xs.push_back(length);
	}
	else if (dim == 2 ){
		xs.push_back(length);
		xs.push_back(avg_cov);
	}
	else{
		xs.push_back(length);
		xs.push_back(avg_cov);
		xs.push_back(GENE);
	}

	return xs;

}



#endif /* MEMM_CLASS_H_ */
